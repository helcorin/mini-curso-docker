{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template to Lauch a Docker CE machine in a single instance. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "id_fiap",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "AWS Linux EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DockerAccount" : {
      "Type" : "String",
      "Description" : "Username for SSH and docker manipulation"
    },

    "DockerPassword" : {
      "NoEcho": "true",
      "Description" : "The pasword for docker account",
      "Type": "String",
      "MinLength": "7",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "ServerCount": {
      "Default": "1",
      "Description" : "The initial number of Docker Machine instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "20",
      "ConstraintDescription" : "must be between 1 and 20 EC2 instances."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATPV64"   },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-97785bed", "HVMG2" : "NOT_SUPPORTED"},
      "us-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f2d3638a", "HVMG2" : "NOT_SUPPORTED"},
      "us-west-1"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-824c4ee2", "HVMG2" : "NOT_SUPPORTED"},
      "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f63b1193", "HVMG2" : "NOT_SUPPORTED"}
    }

  },

  "Resources" : {
    "DockerMachineSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80,443 8080 and 8443 + SSH access + Postgres/Mysql",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80",    "ToPort" : "80",    "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "9090",  "ToPort" : "9090",  "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443",   "ToPort" : "443",   "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "5432",  "ToPort" : "5432",  "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "3306",  "ToPort" : "3306",  "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "2222",  "ToPort" : "2222",  "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22",    "ToPort" : "22",    "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    },
    "DockerMachineServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "20",
        "DesiredCapacity" : { "Ref" : "ServerCount" }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "docker_install" : ["install_cfn", "install_docker", "configure_docker" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets docker_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_docker" : {
            "files": {
              "/etc/cron.d/shutdown": {
                "content": { "Fn::Join": [ "", [
                  "10 ", "15 ", "* ", "* ", "* ", "root ", "/sbin/shutdown ", "-h ", "now ", "\n",
                  "00 ", "02 ", "* ", "* ", "* ", "root ", "/sbin/shutdown ", "-h ", "now ", "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "packages" : {
              "yum" : {
                "docker"       : [],
                "git"          : [],
                "mysql"        : [],
                "mysql-devel"  : [],
                "mysql-libs"   : [],
                "httpd"        : []
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd"  : { "enabled" : "false", "ensureRunning" : "false" },
                "docker" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "configure_docker" : {
            "commands" : {
              "01_create_dockeraccount" : {
                "command" : { "Fn::Join" : ["", ["useradd ", { "Ref" : "DockerAccount" }, "\n"]]}
              },
              "02_set_dockeraccount_password" : {
                "command" : { "Fn::Join" : ["", ["echo ", { "Ref" : "DockerPassword" }, " | ", "passwd ", { "Ref" : "DockerAccount" }, " --stdin", "\n"]]},
              },
              "03_join_docker_group" : {
                "command" : { "Fn::Join" : ["", ["usermod ", "-aG ", "docker,", "wheel ", { "Ref" : "DockerAccount" }, "\n"]]}
              },
              "04_configure_sudo" : {
                "command" : "sed -i '/%wheel/s/^#//' sudoers\n",
                "cwd" : "/etc"
              },
              "05_configure_ssh_pass" : {
                "command" : "sed -i s/'PasswordAuthentication no'/'PasswordAuthentication yes'/g sshd_config\n",
                "cwd" : "/etc/ssh"
              },
              "06_configure_ssh_port" : {
                "command" : "sed /'Port 22'/a 'Port 2200' sshd_config\n",
                "cwd" : "/etc/ssh"
              },
              "07_reload_ssh" : {
                "command" : "service sshd reload"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "DockerMachineSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets docker_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs" : {
    "InstanceURL" : {
      "Value" : { "Fn::Join" : ["", [ "LaunchConfig" ]] },
      "Description" : "DNS publico da instancia"
    }
  }
}
